{% extends "./layout.njk" %} {% block content %}
<div class="manageUser-container">
  <div id="title">
    <h2>Manage Users</h2>
  </div>

  <div class="new-message-container new-user">
    <a href="#">+</a>
  </div>

  <div id="users-table">
    <table>
      <thead>
        <tr>
          <th>Name</th>
          <th>Email</th>
          <th>Manage</th>
        </tr>
      </thead>
      <tbody id="users-table">
        {% if users.length > 0 %}
        {% for user in users %}
        <tr>
          <td class="name">
            <img src="./uploads/avatars/{{ user.avatar }}" />
            <span>{{ user.namme }}</span>
          </td>
          <td>{{ user.email }}</td>
          <td class="manage">
            <img src="./images/trash.png" alt="Delete" />
          </td>
        </tr>
        {% else %}
        <tr>
          <td colspan="3">No users found. {{ errors | dump }}</td>
        </tr>
        {% endfor %}
        
        {% else %}
        
        {% endif %}
      </tbody>
    </table>
  </div>
</div>

<div class="modal-wrapper" id="add-user-modal" {% if errors.length>
  0 %} style="display: block;" {% endif %}>
  <div class="modal">
    <a href="#" class="modal-close">X</a>
    <div class="modal-title">
      <h2>Create New User</h2>
      <h2 id="success-message" style="display: none; color: green">User Saved successfully</h2>
    </div>
    <div class="modal-body">
      <form id="add-user-form" action="/users" method="post" enctype="multipart/form-data">
        <input type="text" placeholder="Enter name" name="name" value="{{ formData.name }}" />
        <p class="error error-name" style="color: #cd5c5c"></p>

        <input type="text" placeholder="Enter email" name="email" value="{{ formData.email }}" />
        <p class="error error-email" style="color: #cd5c5c"></p>

        <input type="text" placeholder="Enter mobile" name="mobile" value="{{ formData.mobile }}" />
        <p class="error error-mobile" style="color: #cd5c5c"></p>

        <input type="password" placeholder="Enter password" name="password" />
        <p class="error error-password" style="color: #cd5c5c"></p>

        <input type="password" placeholder="Confirm password" name="confirmPassword" />
        <p class="error error-confirmPassword" style="color: #cd5c5c"></p>

        <input type="file" name="avatar" />
        <p class="error error-avatar" style="color: #cd5c5c"></p>

        <input type="button" value="Submit" id="submit-btn" />
      </form>

      
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const modal = document.getElementById("add-user-modal");
    const form = document.getElementById("add-user-form");

    async function formSubmit() {
      const formData = new FormData(form);

      try {
        const response = await fetch("/users", {
          method: "POST",
          body: formData,
        });

        if (!response.ok) {
          const errorData = await response.json();
          console.log(errorData);
          const errors = errorData.errors;
          console.log(errors);

          // Clear all .error elements' text content
          document.querySelectorAll(".error").forEach((element) => {
            element.textContent = "";
          });

          // Display validation errors
          Object.keys(errors).forEach((field) => {
            const error = errors[field];
            const formField = form[field];
            if (formField) {
              formField.classList.add("error");
              const errorElement = document.querySelector(`.error-${field}`);
              if (errorElement) {
                errorElement.style.display = "block";
                errorElement.textContent = error.msg;
              }
            }
          });
        } else {
          const data = await response.json();
          const successMsg = document.querySelector("#success-message");
          successMsg.textContent = data.message;
          successMsg.style.display = "block"; // Ensure success message is visible
          form.reset();

          // Hide modal after 3 seconds
          setTimeout(() => {
            modal.style.display = "none";
            successMsg.style.display = "none";
            window.location.reload();
          }, 3000);
        }
      } catch (error) {
        console.error("Error creating user:", error);
      }
    }

    // Event listener for form submission
    document.querySelector("#submit-btn").addEventListener("click", (event) => {
      event.preventDefault(); 
      formSubmit();
    });

    // Event listeners for modal open/close
    document.querySelector(".modal-close").addEventListener("click", () => {
      modal.style.display = "none";
    });

    document.querySelector(".new-user a").addEventListener("click", () => {
      modal.style.display = "block";
    });

    // Event listeners for input fields to clear errors on user interaction
    const inputFields = form.querySelectorAll("input[type=text], input[type=password], input[type=file]");
    inputFields.forEach((input) => {
      input.addEventListener("input", () => {
        const fieldName = input.name;
        const errorElement = document.querySelector(`.error-${fieldName}`);
        if (errorElement) {
          // input.classList.remove("error");
          errorElement.textContent = ""; // Clear error message
        }
      });
    });
  });
</script>

{% endblock %}
